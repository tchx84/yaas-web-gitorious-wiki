# YAAS (Yet Another Activation System) #

This system intends to be a minimalist, easy-to [install, manage, use], standards based alternative to <a href="http://activation.laptop.org">OLPC activation web interface</a>. Creating a safe environment for generating XO activations (leases and development keys) for local deployments.

<img src="http://wiki.paraguayeduca.org/images/c/cc/Schema.png" />

## Assumptions

You should be using [http://dev.laptop.org/git/bios-crypto/ bios-crypto] for your activations generation.

## Packages
The system is composed of 2 packages:
* **yaas-server** provides the activation generation service. It must run on the same machine where the bios-crypto packages are installed.
* **yaas-web** provides a web application that acts as a proxy between users and all the activation generation processes.

## Architectural justification ##
Even when its possible to have all the packages running on the same machine, it is important to provide a mechanism to isolate from the outer-world the critical information that comes along with the bios-crypto packages, such as the private keys.

# Actors #
The system currently support 2 actors.

* Administrator
* User

## Administrator
### Actions
Administrator is able to:

* Generate unlimited developer keys and leases.
* Manage system accounts (CRUD)
* Populate the black list

## User
### Actions
User is able to:

* Generate limited number of leases, for a limited amount of time each.

### Activations Bucket
* The bucket determines how many activations can be generated by a single user.
* Each user has their own bucket counter that gets decremented.
* This bucket counter can be modified by the system administrator.

### Duration limit
* The duration limit determines the maximum duration of a single lease activation. 
* Each user has their own duration limit. 
* This limit can be modified by the system administrator.

### Developer keys
* Each user could also create developer keys.
* This option is set by the administrator on each user individually.

# Installation - server #

Create <tt>/etc/yum.repos.d/pyeduca.repo</tt> with the following contents:

  [pyeduca-base]
  name=Packages used by Paraguay Educa
  baseurl=http://repo.paraguayeduca.org/yum/base
  enabled=1
  gpgcheck=0

Install the package:

  yum install yaas-server

Generate a key pair for the SSL security:

  openssl req -new -x509 -days 9999 -nodes -out pkey-cert.pem -keyout pkey-key.pem

Put the keys somewhere safe, and change and restrict access to the user running the yaas-server, which has to match the user executing bios-crypto script:

  chown OWNER pkey-*.pem
  chmod go-rwx pkey-*.pem

Install bios-crypto (e.g. in the home directory of the user that will run yaas-server)
 yum install git make gcc zlib-devel
 git clone git://dev.laptop.org/bios-crypto
 cd bios-crypto/build
 make cli

Place your private master keys developer keys and leases at
* <tt>bios-crypto/build/developer.public</tt>
* <tt>bios-crypto/build/developer.private</tt>
* <tt>bios-crypto/build/lease.public</tt>
* <tt>bios-crypto/build/lease.private</tt>

Modify the yaas-server configuration file with your favorite text editor:

  cp /opt/yaas-server/etc/yaas.config.example /opt/yaas-server/etc/yaas.config
  vim /opt/yaas-server/etc/yaas.config

Start the server:

 chkconfig yaas on
 service yaas-server start

# Installation - web front end #

Create <tt>/etc/yum.repos.d/pyeduca.repo</tt> with the following contents:

  [pyeduca-base]
  name=Packages used by Paraguay Educa
  baseurl=http://repo.paraguayeduca.org/yum/base
  enabled=1
  gpgcheck=0

The basic setup corresponds to a typical Ruby on Rails application.

Install and enable mysql
 yum install mysql-server
 chkconfig mysqld on
 service mysqld start

The yaas-web installation expects the <tt>root</tt> mysql user to have no password (you can add one after), and requires mysqld to be running (as above). Install it now:

 yum install yaas-web

Install Passenger (this is not packaged in Fedora, so the installation is a bit long winded)

 yum install ruby-devel httpd-devel apr-devel gcc gcc-c++ make
 gem install passenger
 passenger-install-apache2-module

: Follow the instructions to complete the Passenger installation
: <b>Be sure to read the output of the final command, as you must make another change to the apache config (read the instructions)</b>

Add the following to /etc/httpd/conf.d/passenger.conf
 PassengerDefaultUser apache
 PassengerDefaultGroup apache

: It's not exactly clear why this is needed. According to the [http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUserSwitching passenger docs], PassengerUserSwitching (on by default) should cause yaas-web to run as the apache user (which is the owner of config/environment.rb). However, this seems to be broken at the time of writing: it runs as 'nobody' and is hence unable to write log files in /var/yaas-web/log. Adding these lines acts as a simple workaround.

If using SELinux, enable apache to run in permissive mode

 semanage permissive -a httpd_t

: This command enables apache to run in "permissive" mode, meaning that your whole apache installation ignores all policies normally enforced by SELinux. I tried, and ran out of patience before being able to produce a leaner way to get passenger and SELinux working together without error.

Modify the yaas-web communication configuration file:

  vim /var/yaas-web/application/config/yaas.yml

Modify <tt>/etc/httpd/conf/httpd.conf</tt>: uncomment the line <tt>NameVirtualHost *:80</tt> to enable name-based virtual hosting 

Rename /etc/httpd/conf.d/yaas-web.conf.example (removing the .example extension) and customise file to change the ServerName to one that is appropriate for the system.

(Re)start apache

 /etc/init.d/httpd restart

# Contribute #

There are so many things to improve!

Please meet tch and dsd on #sugar @ irc.freenode.org
